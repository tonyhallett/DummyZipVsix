name: test workflow errorson: [workflow_dispatch]jobs:  demo-required:    runs-on: windows-2019    steps:
     - name: demo required       id: demo-required       uses: tonyhallett/ReleaseManager/demo_required@main       - name: log       if: ${{always()}}       run:        echo "conclusion - ${{ steps.demo-required.conclusion }}, outcome - ${{ steps.demo-required.outcome }}"  throw-err:    runs-on: windows-2019    steps:
     - name: throw error       id: js-error       uses: tonyhallett/ReleaseManager/throw_error@main       - name: error in js but successful !       run:        echo "conclusion - ${{ steps.js-error.conclusion }}, outcome - ${{ steps.js-error.outcome }}"  step-error-test:    runs-on: windows-2019    steps:      - name: set error        id: set-error        run:             echo "::error::Success"      - name: log error step        run:             echo "conclusion - ${{ steps.set-error.conclusion }}, outcome - ${{ steps.set-error.outcome }}"      - name: set failed        id: set-failed        uses: tonyhallett/ReleaseManager/set_failed@main      - name: log step success # does not run - implicit if condition success        id: log-step-success        run:             echo "this does not run"      - name: log step success and true # does not run - implicit if condition success        if: ${{true}}        run:             echo "this does not run"      - name: log step failure # one of the steps has failed        if: ${{ failure()}}        run:             echo "failure - conclusion - ${{ steps.set-failed.conclusion }}, outcome - ${{ steps.set-failed.outcome }}"      - name: log job context status and skipped step        if: ${{always()}}        run:             echo "job context ${{job.status}}, skipped step - ${{steps.log-step-success.conclusion}}"  not-success:    runs-on: windows-2019    needs: step-error-test    if: ${{!success()}}    steps:       - name: log not success is evaluated        run: echo "not success run"  step-error-test-continue-on-error:    runs-on: windows-2019    steps:      - name: set failed but continue on error        id: set-failed        continue-on-error: true        uses: tonyhallett/ReleaseManager/set_failed@main      - name: log failed step #runs due to continue-on-error:         run:             echo "conclusion - ${{ steps.set-failed.conclusion }}, outcome - ${{ steps.set-failed.outcome }}"      - name: log job context status        run:             echo "job context ${{job.status}}"  fails-but-continue-on-error:    runs-on: windows-2019    continue-on-error: true    steps:
      - name: set failed        id: set-failed        uses: tonyhallett/ReleaseManager/set_failed@main      - name: job continue-on-error does not allow step to proceed        run: echo "this should not run"  dependent-upon-fails:    runs-on: windows-2019    needs: step-error-test    steps:
      - name: should not run        run: echo "this should not run"  dependent-upon-successful:    runs-on: windows-2019    needs: step-error-test-continue-on-error    steps:
      - name: needs result        run: echo "needs result ${{needs.step-error-test-continue-on-error.result}}"  dependent-upon-fails-continues-on-error:    runs-on: windows-2019    needs: fails-but-continue-on-error    steps:
      - name: needs result        run: echo "needs result ${{needs.fails-but-continue-on-error.result}}"  dependent-upon-skipped:    runs-on: windows-2019    needs: dependent-upon-fails    if: ${{failure()}} # there is no skipped - but this matches skipped    steps:
      - name: needs result        run: echo "needs result ${{needs.dependent-upon-fails.result}}"      - name: does not run        if: ${{false}}        run: echo       - name: run on failure        if: ${{failure()}}        run: echo "ran on failure"  dependent-upon-fails-always:    runs-on: windows-2019    needs: step-error-test    if: ${{always()}}    steps:
      - name: needs result        run: echo "needs result ${{needs.step-error-test.result}}"  # have to make this dependent upon all of the others so does not cancel them !  demo-cancellation:    runs-on: windows-2019    needs: [dependent-upon-successful, dependent-upon-fails-continues-on-error, dependent-upon-skipped, dependent-upon-fails-always]    if: ${{always()}}
    steps:
      - name: log job context status 1        run:             echo "job context ${{job.status}}"
      - name: cancel workflow
        uses: andymckay/cancel-action@0.2
      - name: log job context status 2
        run:             echo "job context ${{job.status}}"
      - name: Sleep for 10s
        uses: juliangruber/sleep-action@v1
        with:
            time: 10s
      - name: log job context status 3
        if: ${{always()}}
        run:             echo "job context ${{job.status}}" # bizarelly ? this is reported as success and not cancelled !
  dependent-on-cancellation:
    runs-on: windows-2019
    needs: demo-cancellation
    if: ${{cancelled()}} # this is required
    steps:
      - name: needs result        run: echo "needs result ${{needs.demo-cancellation.result}}" # this too is success !

        